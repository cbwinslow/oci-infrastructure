name: Project Tracking and JIRA Integration

on:
  issues:
    types: [opened, closed, edited, labeled, unlabeled]
  pull_request:
    types: [opened, closed, merged, labeled, unlabeled]
  push:
    branches: [main, develop]
  schedule:
    # Run monitoring checks every 4 hours
    - cron: '0 */4 * * *'

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Update Project Board
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');
            
            // Auto-label issues based on title patterns
            if (context.eventName === 'issues' && context.payload.action === 'opened') {
              const title = context.payload.issue.title.toLowerCase();
              const labels = [];
              
              if (title.includes('bug') || title.includes('🐛')) {
                labels.push('bug');
              }
              if (title.includes('feature') || title.includes('✨')) {
                labels.push('feature-request');
              }
              if (title.includes('doc') || title.includes('📚')) {
                labels.push('documentation');
              }
              if (title.includes('security') || title.includes('🔒')) {
                labels.push('security');
              }
              
              if (labels.length > 0) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.issue.number,
                  labels: labels
                });
              }
            }

  jira-sync:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    steps:
      - name: JIRA Integration
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Placeholder for JIRA integration
            // This would typically use JIRA REST API to:
            // 1. Create JIRA tickets from GitHub issues
            // 2. Update JIRA ticket status based on GitHub issue status
            // 3. Add comments to JIRA tickets when GitHub issues are updated
            
            console.log('JIRA sync would be implemented here');
            console.log(`Issue: ${context.payload.issue?.title || 'N/A'}`);
            console.log(`Action: ${context.payload.action}`);

  monitoring-alerts:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check Infrastructure Status
        run: |
          echo "Checking infrastructure health..."
          
          # Check for log file accumulation
          if [ -d "terraform-oci/logs" ]; then
            log_count=$(find terraform-oci/logs -name "*.log" | wc -l)
            if [ "$log_count" -gt 10 ]; then
              echo "::warning::Too many log files detected ($log_count). Consider cleanup."
            fi
          fi
          
          # Check for uncommitted changes
          if ! git diff --quiet; then
            echo "::warning::Uncommitted changes detected in repository"
          fi
          
          # Check for outdated dependencies (if package.json exists)
          if [ -f "package.json" ]; then
            echo "Checking for outdated dependencies..."
            npm audit || echo "::warning::Security vulnerabilities detected in dependencies"
          fi

  ci-cd-status:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Terraform Validation
        run: |
          # Install Terraform if needed
          if ! command -v terraform &> /dev/null; then
            wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update && sudo apt install terraform
          fi
          
          # Validate Terraform configurations
          find . -name "*.tf" -exec dirname {} \; | sort | uniq | while read dir; do
            echo "Validating Terraform in $dir"
            cd "$dir"
            terraform init -backend=false
            terraform validate
            cd - > /dev/null
          done

      - name: Update CI/CD Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');
            
            // Create a comment on recent issues about CI/CD status
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'in-progress',
              per_page: 5
            });
            
            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `🔄 **CI/CD Status Update**\n\nLatest commit: ${context.sha.substring(0, 7)}\nBranch: ${context.ref}\nWorkflow: ✅ Terraform validation passed`
              });
            }

