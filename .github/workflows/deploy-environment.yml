name: Deploy to Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
        - development
        - staging
        - production
      action:
        description: 'Deployment action'
        required: true
        type: choice
        default: 'plan'
        options:
        - plan
        - apply
        - destroy
      force_deploy:
        description: 'Force deployment (bypass checks)'
        required: false
        type: boolean
        default: false

env:
  TF_VERSION: "~1.5"
  TERRAFORM_DIR: "terraform-oci"

jobs:
  validate-deployment:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.validation.outputs.approved }}
      terraform-dir: ${{ steps.validation.outputs.terraform-dir }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate deployment request
      id: validation
      run: |
        # Validate environment-specific requirements
        case "${{ github.event.inputs.environment }}" in
          "production")
            if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
              echo "❌ Production deployments only allowed from main branch"
              exit 1
            fi
            if [[ "${{ github.event.inputs.action }}" == "destroy" && "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
              echo "❌ Production destroy requires force_deploy=true"
              exit 1
            fi
            echo "terraform-dir=terraform-oci" >> $GITHUB_OUTPUT
            ;;
          "staging")
            if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.ref }}" != "refs/heads/develop" ]]; then
              echo "❌ Staging deployments only allowed from main or develop branches"
              exit 1
            fi
            echo "terraform-dir=terraform-oci" >> $GITHUB_OUTPUT
            ;;
          "development")
            echo "terraform-dir=terraform-oci/free-tier" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "❌ Unknown environment: ${{ github.event.inputs.environment }}"
            exit 1
            ;;
        esac
        
        echo "✅ Deployment validation passed"
        echo "approved=true" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: needs.validate-deployment.outputs.approved == 'true'
    
    environment: 
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.deployment.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
        
    - name: Configure OCI CLI
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
        chmod 600 ~/.oci/oci_api_key.pem
        
        cat > ~/.oci/config << EOF
        [DEFAULT]
        user=${{ secrets.OCI_USER_OCID }}
        fingerprint=${{ secrets.OCI_FINGERPRINT }}
        key_file=~/.oci/oci_api_key.pem
        tenancy=${{ secrets.OCI_TENANCY_OCID }}
        region=${{ secrets.OCI_REGION }}
        EOF
        
    - name: Terraform Init
      run: |
        cd ${{ needs.validate-deployment.outputs.terraform-dir }}
        terraform init
      env:
        TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
        TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}
        TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
        TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
        TF_VAR_private_key: ${{ secrets.OCI_PRIVATE_KEY }}
        TF_VAR_region: ${{ secrets.OCI_REGION }}
        TF_VAR_environment: ${{ github.event.inputs.environment }}
        
    - name: Terraform Plan
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
      run: |
        cd ${{ needs.validate-deployment.outputs.terraform-dir }}
        terraform plan -input=false -out=tfplan
        terraform show -no-color tfplan > tfplan.txt
      env:
        TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
        TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}
        TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
        TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
        TF_VAR_private_key: ${{ secrets.OCI_PRIVATE_KEY }}
        TF_VAR_region: ${{ secrets.OCI_REGION }}
        TF_VAR_environment: ${{ github.event.inputs.environment }}
        
    - name: Upload Plan Artifact
      if: github.event.inputs.action == 'plan'
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ github.event.inputs.environment }}
        path: |
          ${{ needs.validate-deployment.outputs.terraform-dir }}/tfplan
          ${{ needs.validate-deployment.outputs.terraform-dir }}/tfplan.txt
        retention-days: 30
        
    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      id: deployment
      run: |
        cd ${{ needs.validate-deployment.outputs.terraform-dir }}
        terraform apply -input=false -auto-approve tfplan
        
        # Capture outputs
        terraform output -json > outputs.json
        
        # Extract important outputs for environment URL
        if terraform output -raw load_balancer_ip 2>/dev/null; then
          echo "url=http://$(terraform output -raw load_balancer_ip)" >> $GITHUB_OUTPUT
        else
          echo "url=https://console.cloud.oracle.com" >> $GITHUB_OUTPUT
        fi
      env:
        TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
        TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}
        TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
        TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
        TF_VAR_private_key: ${{ secrets.OCI_PRIVATE_KEY }}
        TF_VAR_region: ${{ secrets.OCI_REGION }}
        TF_VAR_environment: ${{ github.event.inputs.environment }}
        
    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        cd ${{ needs.validate-deployment.outputs.terraform-dir }}
        terraform destroy -input=false -auto-approve
      env:
        TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
        TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}
        TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
        TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
        TF_VAR_private_key: ${{ secrets.OCI_PRIVATE_KEY }}
        TF_VAR_region: ${{ secrets.OCI_REGION }}
        TF_VAR_environment: ${{ github.event.inputs.environment }}
        
    - name: Upload Deployment Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: deployment-${{ github.event.inputs.environment }}-${{ github.run_number }}
        path: |
          ${{ needs.validate-deployment.outputs.terraform-dir }}/outputs.json
          ${{ needs.validate-deployment.outputs.terraform-dir }}/terraform.tfstate*
          ${{ needs.validate-deployment.outputs.terraform-dir }}/tfplan.txt
        retention-days: 90
        
    - name: Post-deployment Tests
      if: github.event.inputs.action == 'apply'
      run: |
        echo "Running post-deployment validation tests..."
        
        # Basic connectivity tests
        cd ${{ needs.validate-deployment.outputs.terraform-dir }}
        if [ -f "../tests/integration/test_deployment.sh" ]; then
          chmod +x ../tests/integration/test_deployment.sh
          ../tests/integration/test_deployment.sh
        else
          echo "No post-deployment tests found, skipping..."
        fi
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment }}
        
  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [validate-deployment, deploy]
    if: always()
    
    steps:
    - name: Create deployment summary
      run: |
        echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Action:** ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.deploy.outputs.url }}" != "" ]]; then
          echo "**Environment URL:** ${{ needs.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        fi

